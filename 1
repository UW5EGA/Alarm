#include <SPI.h>
#include <Ethernet.h> 
boolean newInfo = 0;

byte mac[] = { 0x00, 0xAA, 0xBB, 0xCC, 0xDA, 0x02 };     
IPAddress ip(192,168,4,70);
byte gateway[] = { 192, 168, 4, 1 };
byte subnet[] = { 255, 255, 255, 0 }; 
EthernetServer server(80);

void setup()
{
  pinMode(8, OUTPUT);
  digitalWrite(8,HIGH);
  Ethernet.begin(mac, ip);
  server.begin();
  Serial.begin(9600);
}


void loop()
{
  EthernetClient client = server.available();
  if(client){
  boolean currentLineIsBlank = true;
  unsigned long currentMillis = millis();
  while (client.connected()) {
    if (client.available()) {
      char c = client.read();
                                                  
      if(newInfo && c == ' '){
        newInfo = 0;
      }
      
      if(c == '$'){
        newInfo = 1;
      }
      
      if(newInfo == 1){
          Serial.println(c);
          if(c == '1'){
          Serial.println("ON");
          digitalWrite(8, HIGH);          
          }
          
          
          if(c == '2'){
          Serial.println("OFF");
          digitalWrite(8, HIGH);
          while(currentMillis - previusMillis > (interval * 8))
          {
            previusMillis = currentMillis;
          };
          digitalWrite(8, LOW);
          while(currentMillis - previusMillis > (interval * 5))
          {
            previusMillis = currentMillis;
          };
          digitalWrite(8, HIGH);
          while(currentMillis - previusMillis > (interval * 8))
          {
            previusMillis = currentMillis;
          };
          digitalWrite(8, LOW);
          while(currentMillis - previusMillis > (interval * 10))
          {
            previusMillis = currentMillis;
          };
          digitalWrite(8, HIGH);
          while(currentMillis - previusMillis > (interval * 210))
          {
            previusMillis = currentMillis;
          };
          digitalWrite(8, LOW);
          }    
      } 
      
      if (c == '\n') {
        currentLineIsBlank = true;
      } 
      else if (c != '\r') {
        currentLineIsBlank = false;
      }
    
      if (c == '\n' && currentLineIsBlank) {
        client.println("HTTP/1.1 200 OK");
        client.println("Content-Type: text/html");
        client.println("Connection: close");  
        client.println("Refresh: 30");
        client.println();
        client.println("<!DOCTYPE HTML>");
        client.println("<html>");
        client.print("<title>Web Server</title>");
        client.print("<H1>Web Server</H1>");
        client.print("<a href=\"/$1\"><button>On</button></a>");
        client.print("<a href=\"/$2\"><button>Off</button></a>");
        client.println("<br />");       
        client.println("</html>");
        break;
      }
    
    }
    
  }
  delay(1);
  client.stop();
}
}
